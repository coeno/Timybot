{"version":3,"sources":["../src/duration.js"],"names":["createDuration","toInt","int","parseInt","value","clone","toDate","Date","stripEmptyElements","values","elements","reduce","result","element","index","parser","dateMethods","iso","Error","match","parts","every","part","map","year","month","week","day","hour","minute","second","toString","replace","addTo","d","date","key","method","subtractFrom"],"mappings":"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","file":"duration.js","sourcesContent":["'use strict';\n\nconst toInt = value => {\n  const int = parseInt(value, 10);\n\n  if (int + '' === value) {\n    return int;\n  }\n\n  return value;\n};\nconst clone = value => {\n  if (typeof value === 'object' && typeof value.toDate === 'function') {\n    return value.toDate();\n  }\n\n  return new Date(+value);\n};\nconst stripEmptyElements = ([, ...elements], ...values) =>\n  elements.reduce(\n    (result, element, index) =>\n      `${result}${Number.isInteger(values[index]) ? `${values[index]}${element}` : ''}`,\n    ''\n  );\nconst parser = /P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)W)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?/;\nconst dateMethods = new Map([\n  ['year', 'FullYear'],\n  ['month', 'Month'],\n  ['week', 'Date'],\n  ['day', 'Date'],\n  ['hour', 'UTCHours'],\n  ['minute', 'UTCMinutes'],\n  ['second', 'UTCSeconds']\n]);\n\nexport default function createDuration (iso) {\n  if (!iso || typeof iso !== 'string' || iso[0] !== 'P') {\n    throw new Error(`Invalid duration: ${iso} (invalid format)`);\n  }\n\n  let [, ...parts] = iso.match(parser);\n\n  if (parts.every(part => typeof part === 'undefined')) {\n    throw new Error(`Invalid duration: ${iso} (no date or time elements specified)`);\n  }\n\n  let [year, month, week, day, hour, minute, second] = parts.map(toInt);\n\n  if (week) {\n    week = week * 7;\n  }\n\n  parts = {year, month, week, day, hour, minute, second};\n\n  return Object.freeze({\n    toString: () =>\n      `P${\n        stripEmptyElements`${year}Y${month}M${week / 7}W${day}D`\n      }T${\n        stripEmptyElements`${hour}H${minute}M${second}S`\n      }`.replace(/T$/, ''),\n    addTo: date => {\n      let d = clone(date);\n\n      for (let [key, method] of dateMethods) {\n        if (parts[key]) {\n          d[`set${method}`](d[`get${method}`]() + parts[key]);\n        }\n      }\n\n      return d;\n    },\n    subtractFrom: date => {\n      let d = clone(date);\n\n      for (let [key, method] of dateMethods) {\n        if (parts[key]) {\n          d[`set${method}`](d[`get${method}`]() - parts[key]);\n        }\n      }\n\n      return d;\n    }\n  });\n}\n"]}