'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _taggedTemplateLiteral2 = require('babel-runtime/helpers/taggedTemplateLiteral');

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _freeze = require('babel-runtime/core-js/object/freeze');

var _freeze2 = _interopRequireDefault(_freeze);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _map = require('babel-runtime/core-js/map');

var _map2 = _interopRequireDefault(_map);

var _isInteger = require('babel-runtime/core-js/number/is-integer');

var _isInteger2 = _interopRequireDefault(_isInteger);

var _toArray2 = require('babel-runtime/helpers/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _templateObject = (0, _taggedTemplateLiteral3.default)(['', 'Y', 'M', 'W', 'D'], ['', 'Y', 'M', 'W', 'D']),
    _templateObject2 = (0, _taggedTemplateLiteral3.default)(['', 'H', 'M', 'S'], ['', 'H', 'M', 'S']);

exports.default = createDuration;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var toInt = function toInt(value) {
  var int = parseInt(value, 10);

  if (int + '' === value) {
    return int;
  }

  return value;
};
var clone = function clone(value) {
  if ((typeof value === 'undefined' ? 'undefined' : (0, _typeof3.default)(value)) === 'object' && typeof value.toDate === 'function') {
    return value.toDate();
  }

  return new Date(+value);
};
var stripEmptyElements = function stripEmptyElements(_ref) {
  for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  var _ref2 = (0, _toArray3.default)(_ref),
      elements = _ref2.slice(1);

  return elements.reduce(function (result, element, index) {
    return '' + result + ((0, _isInteger2.default)(values[index]) ? '' + values[index] + element : '');
  }, '');
};
var parser = /P(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)W)?(?:(\d+)D)?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+)S)?)?/;
var dateMethods = new _map2.default([['year', 'FullYear'], ['month', 'Month'], ['week', 'Date'], ['day', 'Date'], ['hour', 'UTCHours'], ['minute', 'UTCMinutes'], ['second', 'UTCSeconds']]);

function createDuration(iso) {
  if (!iso || typeof iso !== 'string' || iso[0] !== 'P') {
    throw new Error('Invalid duration: ' + iso + ' (invalid format)');
  }

  var _iso$match = iso.match(parser),
      _iso$match2 = (0, _toArray3.default)(_iso$match),
      parts = _iso$match2.slice(1);

  if (parts.every(function (part) {
    return typeof part === 'undefined';
  })) {
    throw new Error('Invalid duration: ' + iso + ' (no date or time elements specified)');
  }

  var _parts$map = parts.map(toInt),
      _parts$map2 = (0, _slicedToArray3.default)(_parts$map, 7),
      year = _parts$map2[0],
      month = _parts$map2[1],
      week = _parts$map2[2],
      day = _parts$map2[3],
      hour = _parts$map2[4],
      minute = _parts$map2[5],
      second = _parts$map2[6];

  if (week) {
    week = week * 7;
  }

  parts = { year: year, month: month, week: week, day: day, hour: hour, minute: minute, second: second };

  return (0, _freeze2.default)({
    toString: function toString() {
      return ('P' + stripEmptyElements(_templateObject, year, month, week / 7, day) + 'T' + stripEmptyElements(_templateObject2, hour, minute, second)).replace(/T$/, '');
    },
    addTo: function addTo(date) {
      var d = clone(date);

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)(dateMethods), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _step$value = (0, _slicedToArray3.default)(_step.value, 2),
              key = _step$value[0],
              method = _step$value[1];

          if (parts[key]) {
            d['set' + method](d['get' + method]() + parts[key]);
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return d;
    },
    subtractFrom: function subtractFrom(date) {
      var d = clone(date);

      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = (0, _getIterator3.default)(dateMethods), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _step2$value = (0, _slicedToArray3.default)(_step2.value, 2),
              key = _step2$value[0],
              method = _step2$value[1];

          if (parts[key]) {
            d['set' + method](d['get' + method]() - parts[key]);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return d;
    }
  });
}
//# sourceMappingURL=duration.js.map